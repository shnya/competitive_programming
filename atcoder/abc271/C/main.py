#!/usr/bin/env python3
from pickletools import read_decimalnl_long
import sys


def solve(N: int, a: "List[int]"):
    dic = {}
    for i in a:
        dic[i] = dic.get(i, 0) + 1
    keys = sorted(list(dic.keys()))
    remains = sum(dic.values()) - len(keys)
    j = 0
    read = 0
    for i in range(1, N + 1):
        if j < len(keys) and keys[j] == i:
            read = i
            j += 1
            continue
        else:
            if remains >= 2:
                remains -= 2
                read = i
                continue
            # j = 3 and len(keys) = 4
            elif remains == 1 and j < len(keys):
                remains -= 1
                keys.pop()
                read = i
                continue
            elif remains == 0 and j < len(keys) - 1:
                read = i
                keys.pop()
                keys.pop()
            else:
                break
    print(read)            

    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    a = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    solve(N, a)

if __name__ == '__main__':
    main()
