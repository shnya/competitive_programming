#!/usr/bin/env python3
import sys


sys.setrecursionlimit(100000000)

YES = "Yes"  # type: str
NO = "No"  # type: str

def rec(i, j, N, S, a, b, dp, stack):
    if dp[i][j] != -1:
        return False
    if i == N:
        if j == S:
            print(YES)
            print("".join(stack))
            return True
        else:
            return False
    dp[i][j] = 1
    stack.append("H")
    if rec(i + 1, j + a[i], N, S, a, b, dp, stack):
        return True
    stack.pop()
    stack.append("T")
    if rec(i + 1, j + b[i], N, S, a, b, dp, stack):
        return True
    stack.pop()
    return False


def solve(N: int, S: int, a: "List[int]", b: "List[int]"):
    dp = [[-1] * 10001 for x in range(N + 1)]
    dp[0][a[0]] = 1
    stack = []
    stack.append("H")
    if rec(1, a[0], N, S, a, b, dp, stack):
        return
    stack.pop()
    dp[0][b[0]] = 1
    stack.append("T")
    if rec(1, b[0], N, S, a, b, dp, stack):
        return
    stack.pop()
    print(NO)
    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    S = int(next(tokens))  # type: int
    a = [int()] * (N)  # type: "List[int]"
    b = [int()] * (N)  # type: "List[int]"
    for i in range(N):
        a[i] = int(next(tokens))
        b[i] = int(next(tokens))
    solve(N, S, a, b)

if __name__ == '__main__':
    main()
