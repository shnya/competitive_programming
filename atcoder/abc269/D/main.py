#!/usr/bin/env python3
import sys

sys.setrecursionlimit(100000)


steps = [
  [-1, 0],
  [1, 0],
  [0, 1],
  [1, 1],
  [-1, -1],
  [0, -1]
]

def rec(i, visited, connected):
    if i in visited:
        return
    visited.add(i)
    for j in connected.get(i, []):
        rec(j, visited, connected)


def solve(N: int, X: "List[int]", Y: "List[int]"):
    connected = {}

    for i in range(N):
        Xi = X[i]
        Yi = Y[i]
        for j in range(i + 1, N):
            Xj = X[j]
            Yj = Y[j]
            for step in steps:
                if Xj == Xi + step[0] and Yj == Yi + step[1]:
                    connected.setdefault(i, []).append(j)
                    connected.setdefault(j, []).append(i)
    
    visited = set()
    cnt = 0
    for i in range(N):
        if i in visited:
            continue
        else:
            cnt += 1
        rec(i, visited, connected)
    print(cnt)
    return    



# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    X = [int()] * (N)  # type: "List[int]"
    Y = [int()] * (N)  # type: "List[int]"
    for i in range(N):
        X[i] = int(next(tokens))
        Y[i] = int(next(tokens))
    solve(N, X, Y)

if __name__ == '__main__':
    main()
