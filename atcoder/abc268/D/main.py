#!/usr/bin/env python3
import sys
import itertools


def make_string(S, inserts):
    insert_points = [1] * (len(S) - 1)
    for insert in inserts:
        insert_points[insert] += 1 

    buf = []
    for i in range(len(S)):
        buf.append(S[i])
        if i != len(S) - 1:
            buf.append("_" * insert_points[i])
    return "".join(buf)


def solve(N: int, M: int, S: "List[str]", T: "List[str]"):
    idx = set()
    for t in T:
        idx.add(t)
    max_ = 16 - sum([ len(s) for s in S ]) - (len(S) - 1)
    if max_ < 0:
        print(-1)
        return
    insert_place = range(len(S) - 1)
    for lst in itertools.permutations(S):
        for j in range(max_ + 1):
            for inserts in itertools.combinations_with_replacement(insert_place, j):
                #print(inserts)
                cand = make_string(lst, inserts)
                if cand in idx or len(cand) < 3 or len(cand) > 16:
                    continue
                else:
                    print(cand)
                    return
        
    print(-1)
    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    M = int(next(tokens))  # type: int
    S = [next(tokens) for _ in range(N)]  # type: "List[str]"
    T = [next(tokens) for _ in range(M)]  # type: "List[str]"
    solve(N, M, S, T)

if __name__ == '__main__':
    main()
