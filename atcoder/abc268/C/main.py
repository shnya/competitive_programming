#!/usr/bin/env python3
import sys

MOD = 4  # type: int


def find_proper(N, dists):
    sum = {}
    for i in range(N):
        sum[dists[i]] = sum.get(dists[i], 0) + 1
        sum[dists[i] - 1] = sum.get(dists[i] - 1, 0) + 1
        sum[dists[i] + 1] = sum.get(dists[i] + 1, 0) + 1
    vals = sorted(sum.items(), key=lambda x: x[1], reverse=True)
    return vals[0][1]


def solve(N: int, p: "List[int]"):
    idx = {}
    for i in range(len(p)):
        idx[p[i]] = i
    
    # 左回り
    dists = [0] * N
    for i in range(N):
        if p[i] > i:
            dist = N - (p[i] - i)
        else:
            dist = i - p[i]
        dists[i] = dist
    max_n = find_proper(N, dists)

    # 右回り
    dists = [0] * N
    for i in range(N):
        if p[i] < i:
            dist = N - (i - p[i])
        else:
            dist = p[i] - i
        dists[i] = dist
    max_n = max(max_n, find_proper(N, dists))
    print(max_n)

    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    p = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    solve(N, p)

if __name__ == '__main__':
    main()
