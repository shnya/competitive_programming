#!/usr/bin/env python3
import sys
from typing import List

sys.setrecursionlimit(5000)

MIN_N = -2001 * 2001 * 300000
MIN_N_1 = MIN_N - 1
 
 
def rec(i, j, A, N, M, dp):
    if j == M:
        return 0
    if i == N:
        return MIN_N
    if dp[i][j] != MIN_N_1:
        return dp[i][j]
    
    max_sum = MIN_N
    # 1つとった場合
    val = rec(i + 1, j + 1, A, N, M, dp)
    if val != MIN_N:
        max_sum = max(max_sum, (j + 1) * A[i] + val)
 
    # 取らなかった場合
    val = rec(i + 1, j, A, N, M, dp)
    if val != MIN_N:
        max_sum = max(max_sum, val)
 
    dp[i][j] = max_sum
    return dp[i][j]
 
 
def solve(N: int, M: int, A: "List[int]"):
    dp = [[MIN_N_1] * (M + 1) for _ in range(N + 1)]
    print(rec(0, 0, A, N, M, dp))
 


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    M = int(next(tokens))  # type: int
    A = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    solve(N, M, A)

if __name__ == '__main__':
    main()
