#!/usr/bin/env python3
import sys


def solve(N: int, M: int, A: "List[int]"):
    sum = 0
    lsum = 0
    sums = []
    for i in range(M):
        sum += A[i]
        sums.append(sum)
        lsum += (i + 1) * A[i]
    sum_max = lsum

    for i in range(M, N):
        sum += A[i] - A[i-M]
        sums.append(sum)

    for i in range(M, N):
        lsum += M * A[i] - sums[i-1]
        #print(i, lsum)
        sum_max = max(lsum, sum_max)

    print(sum_max)


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    M = int(next(tokens))  # type: int
    A = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    solve(N, M, A)

if __name__ == '__main__':
    main()
