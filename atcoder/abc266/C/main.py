#!/usr/bin/env python3
import sys
import math

YES = "Yes"  # type: str
NO = "No"  # type: str

def calc(A_x, A_y, B_x, B_y):
    return (A_x * B_y - A_y * B_x) > 0


def solve(A_x: int, A_y: int, B_x: int, B_y: int, C_x: int, C_y: int, D_x: int, D_y: int):
    res = 0
    res += calc(B_x - A_x, B_y - A_y, D_x - A_x, D_y - A_y)
    res += calc(C_x - B_x, C_y - B_y, A_x - B_x, A_y - B_y)
    res += calc(D_x - C_x, D_y - C_y, B_x - C_x, B_y - C_y)
    res += calc(A_x - D_x, A_y - D_y, C_x - D_x, C_y - D_y)
    if res < 4:
        print(NO)
    else:
        print(YES)
    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    A_x = int(next(tokens))  # type: int
    A_y = int(next(tokens))  # type: int
    B_x = int(next(tokens))  # type: int
    B_y = int(next(tokens))  # type: int
    C_x = int(next(tokens))  # type: int
    C_y = int(next(tokens))  # type: int
    D_x = int(next(tokens))  # type: int
    D_y = int(next(tokens))  # type: int
    solve(A_x, A_y, B_x, B_y, C_x, C_y, D_x, D_y)

if __name__ == '__main__':
    main()
