#!/usr/bin/env python3
from os import CLD_CONTINUED
import sys


def solve(N: int, T: "List[int]", X: "List[int]", A: "List[int]"):
    dp = [[0] * 5 for _ in range(100002)]
    ns = [()] * (100002)

    for i in range(len(T)):
        ns[T[i]] = (X[i], A[i])

    dp[0][0] = 0
    if len(ns[0]) != 0 and ns[0][0] == 0:
        dp[0][0] = ns[0][1]

    for i in range(1, 100001):
        for j in range(5):
            if j > i:
                continue
            a = 0
            if len(ns[i]) != 0 and ns[i][0] == j:
                a = ns[i][1] 
            if j == 0:
                dp[i][j] = max(dp[i-1][j], dp[i-1][j+1]) + a
            elif j == 4:            
                dp[i][j] = max(dp[i-1][j], dp[i-1][j-1]) + a
            else:
                dp[i][j] = max(dp[i-1][j], dp[i-1][j-1], dp[i-1][j+1]) + a
        #if i < 10:
            #print(i, dp[i])
    print(max(dp[100000]))
    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    T = [int()] * (N)  # type: "List[int]"
    X = [int()] * (N)  # type: "List[int]"
    A = [int()] * (N)  # type: "List[int]"
    for i in range(N):
        T[i] = int(next(tokens))
        X[i] = int(next(tokens))
        A[i] = int(next(tokens))
    solve(N, T, X, A)

if __name__ == '__main__':
    main()
